<?php

/**
 * This file is licensed under MIT License.
 * 
 * Copyright (c) 2019 Ibrahim BinAlshikh
 * 
 * For more information on the license, please visit: 
 * https://github.com/WebFiori/.github/blob/main/LICENSE
 * 
 */
namespace WebFiori\Database;

/**
 * A class that represents a connection to a database.
 * 
 * @author Ibrahim
 * 
 */
abstract class Connection {
    /**
     *
     * @var ConnectionInfo 
     * 
     */
    private $connParams;
    private $executedQueries;
    /**
     *
     * @var string
     * 
     */
    private $lastErrCode;
    /**
     *
     * @var string
     * 
     */
    private $lastErrMsg;
    /**
     *
     * @var AbstractQuery|null
     * 
     */
    private $lastQuery;
    /**
     * The result set which contains fetched data.
     * 
     * @var ResultSet 
     */
    private $resultSet;
    /**
     * Creates new instance of the class.
     * 
     * @param ConnectionInfo $connInfo An object that contains database connection 
     * information.
     * 
     * @throws DatabaseException If the connection to the database fails, the method 
     * will throw an exception.
     * 
     */
    public function __construct(ConnectionInfo $connInfo) {
        $this->connParams = $connInfo;
        $this->executedQueries = [];

        if (!$this->connect()) {
            throw new DatabaseException('Unable to connect to database: '.$this->getLastErrCode().' - '.$this->getLastErrMessage(), $this->getLastErrCode());
        }
    }
    /**
     * Adds a query to the set of executed SQL queries.
     * 
     * This method is used to append the queries that reached execution stage.
     * 
     * @param string $query The query that will be executed.
     */
    public function addToExecuted(string $query) {
        $this->executedQueries[] = $query;
    }
    public abstract function beginTransaction(?string $name = null);
    public abstract function commit(?string $name = null);
    /**
     * Connect to RDBMS.
     * 
     * The developer must implement this method in a way it establishes a connection 
     * to a database using native database driver or PDO. Once the connection is 
     * established without errors, the method should return true.
     * 
     * @return bool If the connection to the database is established, the method 
     * should return true. False otherwise.
     * 
     */
    public abstract function connect() : bool;
    /**
     * Returns an object that contains database connection information.
     * 
     * @return ConnectionInfo An object that contains database connection information.
     * 
     */
    public function getConnectionInfo() : ConnectionInfo {
        return $this->connParams;
    }
    /**
     * Returns an indexed array that contains all executed SQL queries.
     * 
     * @return array An indexed array that contains all executed SQL queries.
     * 
     */
    public function getExecutedQueries() : array {
        return $this->executedQueries;
    }
    /**
     * Returns error code at which that was generated by executing last query.
     * 
     * @return int|string Last error code at which that was generated by executing last query.
     * 
     */
    public function getLastErrCode() {
        return $this->lastErrCode;
    }
    /**
     * Returns the last message at which that was generated by executing a query.
     * 
     * @return string The last message at which that was generated by executing a query.
     * 
     */
    public function getLastErrMessage() : string {
        return $this->lastErrMsg;
    }
    /**
     * Returns last executed query object.
     * 
     * @return AbstractQuery|null Last executed query object. If no query was executed, 
     * the method will return null.
     * 
     */
    public function getLastQuery() {
        return $this->lastQuery;
    }
    /**
     * Returns last result set.
     * 
     * @return ResultSet|null The result set. If the result set is not set, the 
     * method will return null.
     * 
     */
    public function getLastResultSet() {
        return $this->resultSet;
    }
    public abstract function rollBack(?string $name = null);
    /**
     * Sets the last query and execute it.
     * 
     * This method should be implemented in a way that it accepts null or an 
     * object of type 'AbstractQuery'. If an object of type 'AbstractQuery' is 
     * passed, then the last query will be set to it. After that, the method should 
     * run the query. If null is passed, the method should check for last 
     * query object. If set, it should execute it.
     * 
     */
    public abstract function runQuery(?AbstractQuery $query = null);
    /**
     * Sets error code at which that was generated by executing last query.
     * 
     * @param int|string $code An integer value or any code that represents error code.
     * 
     */
    public function setErrCode($code) {
        $this->lastErrCode = $code;
    }
    /**
     * Sets error message at which that was generated by executing last query.
     * 
     * @param string $message The Error message.
     * 
     */
    public function setErrMessage(string $message) {
        $this->lastErrMsg = $message;
    }
    /**
     * Sets the last executed query.
     * 
     * @param AbstractQuery $query Last executed query.
     * 
     */
    public function setLastQuery(AbstractQuery $query) {
        $this->lastQuery = $query;
    }
    /**
     * Sets result set.
     * 
     * @param ResultSet $result An object that represents result set.
     * 
     */
    public function setResultSet(ResultSet $result) {
        $this->resultSet = $result;
    }
}
